"""test suite for meta_loader.py
sut = system under test
"""
from pathlib import Path
from unittest.mock import patch, MagicMock
from xml.etree import ElementTree as ET


import meta_loader 


class TestMetaLoader: 

	def __get_response(self, page:int=1) -> str:
		"""Returns test XML request."""

		test_response_file = Path(f"./tests/test_scraper/test_response_{page}.xml")
		test_response = test_response_file.read_text(encoding="utf-8")

		return test_response


	def __get_test_xml_list(self, page:int=1) -> list[str]:
		"""Returns test XML list."""
		test_response_file = Path(f"./tests/test_scraper/test_response_{page}.xml")
		test_response = test_response_file.read_text(encoding="utf-8")

		test_xml = ET.fromstring(test_response)
		test_xml_list = test_xml.findall(".//{http://ris.bka.gv.at/ogd/V2_6}OgdDocumentReference")
		
		return test_xml_list


    
	@patch("meta_loader.XML_Request", autospec=True)
	def test_load_meta_data(self, mock_request_class):
		"""The actual download is mocked out. Instead a two page query result 
		is tested. The mock XML result files are located in tests/test_scraper/
		The xml request sent to the API is not tested here, because the it is 
		generated by the XML_Request class (maybe a bad idea). 
		"""
		
		mock_request_instance = MagicMock()
		mock_request_instance.send_xml_request.side_effect = [self.__get_response(1), self.__get_response(2)]
		mock_request_class.return_value = mock_request_instance
		sut = meta_loader.MetaLoader("vfgh", 2022)

		expected_result = self.__get_test_xml_list(1) + self.__get_test_xml_list(2)

		actual_result = sut.load_meta_data()

		for actual, expected in zip(actual_result, expected_result):
			assert ET.tostring(actual) == ET.tostring(expected)
		
		

class TestXMLRequest:

	def test_generate_xml_request(self):
		"""Test if XML request is generated correctly."""
		sut = meta_loader.XML_Request("vfgh", 2022)
		actual_result = sut.generate_xml_request(1)
		expected_result = Path("./tests/test_scraper/test_request.xml").read_text(encoding="utf-8")

		assert actual_result == expected_result

	

		
		
		


	


